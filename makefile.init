OBJS += ./dqr.o ./main.o ./trace.o
INCLUDES += ../include/dqr.hpp ../include/trace.hpp
SWIGLIBOBJS += ./dqr_wrap.o ./dqr.o ./trace.o
SWIGINCLUDES += ../include/dqr.i
SWIGCPP += ./dqr_wrap.cpp
SWIGOBJ += ./dqr_wrap.o

%.o: ../src/%.cpp $(INCLUDES)
	@echo 'Building file: $<'
	@echo 'Invoking: GCC C++ Compiler'
	$(CROSSPREFIX)g++ -I"$(LIBPATH)" -I"../include" $(CFLAGS) -c -fmessage-length=0 -MMD -MP -MF"$(@:%.o=%.d)" -MT"$(@)" -o "$@" "$<"
	@echo 'Finished building: $<'
	@echo ' '

ifeq ($(OS),Windows_NT)
    PLATFORM = windows
    ifeq ($(BINUTILSPATH),)
        PICLIBS :=
        STATICLIBS :=
        LIBBFDOBJS :=
        LIBOPCODESOBJS :=
        LIBLIBERTYOBJS :=
    else
        PICLIBS :=
        STATICLIBS := bfd opcodes liberty intl zlib
        LIBBFDOBJS :=
        LIBOPCODESOBJS :=
        LIBLIBERTYOBJS :=
    endif
    SWIG = $(shell which swig 2> nul)
    ifeq ($(SWIG),)
        $(info swig not found; skipping swig and dqr shared library build)
        SWIGLIB := 
        JNIINCLUDEPATHS :=
    else
        LIBSEARCHPATH := $(shell $(CROSSPREFIX)gcc -print-search-dirs | grep -i "libraries: =" 2> /dev/null)
        LIBSEARCHPATH2 := $(shell which $(CROSSPRIFIX)gcc 2> /dev/null)
        LIBSEARCHPATH2 := $(subst /gcc,/,$(LIBSEARCHPATH2))
        LIBSEARCHPATH := $(LIBSEARCHPATH) $(LIBSEARCHPATH2)
        LIBSEARCHPATH := $(patsubst libraries:%,%,$(LIBSEARCHPATH))
        LIBSEARCHPATH := $(patsubst =%,%,$(LIBSEARCHPATH))
        LIBSEARCHPATH := $(subst ;, ,$(LIBSEARCHPATH))
        MINGWLIBS := libgcc_s_seh*.dll libstdc++*.dll libwinpthread*.dll
        ifeq ($(JNIINCLUDE),)
            JAVAC = $(shell which javac 2> nul)
            ifeq ($(JAVAC),)
                $(info javac not found; skipping swig and the dqr shared library build)
                JNIINCLUDE :=
                JNIINCLUDEPATH :=
            else
                JNIINCLUDE := $(patsubst %/bin/javac,%/include,$(realpath $(JAVAC)))
            endif
        endif
        ifeq ($(JNIINCLUDE),)
            $(info JNIINCLUDE not defined; skipping swig and dqr shared library build)
            SWIGLIB :=
            JNIINCLUDEPATHS :=
        else
            $(info using $(JNIINCLUDE) for JNIINCLUDE path)
            SWIGLIB := dqr.dll
            $(info building swig $(SWIGLIB))
            JNIINCLUDEPATHS := -I"$(JNIINCLUDE)" -I"$(JNIINCLUDE)\win32"
        endif
    endif
    CFLAGS += -D WINDOWS -std=c++11
    SWIGCFLAGS += -D WINDOWS -std=c++11
    LIBPATH = ../lib/windows
    PICLIBFLAGS :=
    LNFLAGS = -static
    LIBS := -lbfd -lopcodes -lintl -liberty -lz
    EXECUTABLE := dqr.exe
else
    UNAME_S := $(shell uname -s)
    ifeq ($(UNAME_S),Linux)
        PLATFORM = linux
        ifeq ($(BINUTILSPATH),)
            PICLIBS :=
            STATICLIBS :=
            LIBBFDOBJS :=
            LIBOPCODESOBJS :=
            LIBLIBERTYOBJS :=
        else
            PICLIBS := picbfd picopcodes picliberty
            STATICLIBS := bfd opcodes liberty zlib
            LIBBFDOBJS := archive.o \
                          archures.o \
                          bfd.o \
                          bfdio.o \
                          bfdwin.o \
                          cache.o \
                          coff-bfd.o \
                          compress.o \
                          corefile.o \
                          elf-properties.o \
                          format.o \
                          hash.o \
                          init.o \
                          libbfd.o \
                          linker.o \
                          merge.o \
                          opncls.o \
                          reloc.o \
                          section.o \
                          simple.o \
                          stab-syms.o \
                          stabs.o \
                          syms.o \
                          targets.o \
                          binary.o \
                          ihex.o \
                          srec.o \
                          tekhex.o \
                          verilog.o \
                          elf64-riscv.o \
                          elf64.o \
                          elfxx-riscv.o \
                          elf32.o \
                          elf.o \
                          elflink.o \
                          elf-attrs.o \
                          elf-strtab.o \
                          elf-eh-frame.o \
                          dwarf1.o \
                          dwarf2.o \
                          elf32-riscv.o \
                          elf64-gen.o \
                          elf32-gen.o \
                          plugin.o \
                          cpu-riscv.o \
                          archive64.o
            LIBOPCODESOBJS := dis-buf.o disassemble.o dis-init.o riscv-dis.o riscv-opc.o
            LIBLIBERTYOBJS := regex.o \
                              cplus-dem.o \
                              cp-demangle.o \
                              md5.o \
                              sha1.o \
                              alloca.o \
                              argv.o \
                              choose-temp.o \
                              concat.o \
                              cp-demint.o \
                              crc32.o \
                              d-demangle.o \
                              dwarfnames.o \
                              dyn-string.o \
                              fdmatch.o \
                              fibheap.o \
                              filename_cmp.o \
                              floatformat.o \
                              fnmatch.o \
                              fopen_unlocked.o \
                              getopt.o \
                              getopt1.o \
                              getpwd.o \
                              getruntime.o \
                              hashtab.o \
                              hex.o \
                              lbasename.o \
                              lrealpath.o \
                              make-relative-prefix.o \
                              make-temp-file.o \
                              objalloc.o \
                              obstack.o \
                              partition.o \
                              pexecute.o \
                              physmem.o \
                              pex-common.o \
                              pex-one.o \
                              pex-unix.o \
                              vprintf-support.o \
                              rust-demangle.o \
                              safe-ctype.o \
                              simple-object.o \
                              simple-object-coff.o \
                              simple-object-elf.o \
                              simple-object-mach-o.o \
                              simple-object-xcoff.o \
                              sort.o \
                              spaces.o \
                              splay-tree.o \
                              stack-limit.o \
                              strerror.o \
                              strsignal.o \
                              timeval-utils.o \
                              unlink-if-ordinary.o \
                              xasprintf.o \
                              xatexit.o \
                              xexit.o \
                              xmalloc.o \
                              xmemdup.o \
                              xstrdup.o \
                              xstrerror.o \
                              xstrndup.o \
                              xvasprintf.o \
                              setproctitle.o
        endif
        SWIG = $(shell which swig 2> /dev/null)
        ifeq ($(SWIG),)
            $(info swig not found; skipping swig and dqr shared library build)
            SWIGLIB := 
            JNIINCLUDE :=
            JNIINCLUDEPATHS :=
        else
            ifeq ($(JNIINCLUDE),)
                JAVAC = $(shell which javac 2> /dev/null)
                ifeq ($(JAVAC),)
                    $(info javac not found; skipping swig and the dqr shared library build)
                    JNIINCLUDE :=
                    JNIINCLUDEPATH :=
                else
                    JNIINCLUDE := $(patsubst %/bin/javac,%/include,$(realpath $(JAVAC)))
                endif
            endif
            ifeq ($(JNIINCLUDE),)
                $(info JNIINCLUDE not defined; skipping swig and dqr shared library build)
                SWIGLIB := 
                JNIINCLUDEPATHS :=
            else
                $(info using $(JNIINCLUDE) for JNIINCLUDE path)
                SWIGLIB := libdqr.so
                JNIINCLUDEPATHS := -I"$(JNIINCLUDE)" -I"$(JNIINCLUDE)/linux"
            endif
        endif
        REDHAT_REL := $(wildcard /etc/redhat-release)
        ifneq ($(REDHAT_REL),)
            CFLAGS += -D LINUX -std=c++11 -fPIC -DPIC
            SWIGCFLAGS += -D LINUX -std=c++11 -fPIC -DPIC
            LIBPATH = ../lib/linux
            LIBS := -lbfd -lopcodes -liberty -lz -ldl
            PICLIBFLAGS := -L$(LIBPATH)/picbfd -L$(LIBPATH)/picopcodes -L$(LIBPATH)/picliberty
            LNFLAGS :=
            EXECUTABLE := dqr
        else
            ifeq ($(CROSSPREFIX),x86_64-w64-mingw32-)
                PLATFORM := windows
                ifeq ($(BINUTILSPATH),)
                    PICLIBS :=
                    STATICLIBS :=
                    LIBBFDOBJS :=
                    LIBOPCODESOBJS :=
                    LIBLIBERTYOBJS :=
                else
                    PICLIBS :=
                    STATICLIBS := bfd opcodes liberty intl zlib
                    LIBBFDOBJS :=
                    LIBOPCODESOBJS :=
                    LIBLIBERTYOBJS :=
                endif
                CFLAGS += -D WINDOWS -std=c++11
                SWIGCFLAGS += -D WINDOWS -std=c++11
                LIBPATH = ../lib/windows
                PICLIBFLAGS :=
                LNFLAGS = -static
                LIBS := -lbfd -lopcodes -lintl -liberty -lz
                EXECUTABLE := dqr.exe
                LIBSEARCHPATH := $(shell $(CROSSPREFIX)gcc -print-search-dirs | grep -i "libraries: =" 2> /dev/null)
                LIBSEARCHPATH := $(patsubst libraries:%,%,$(LIBSEARCHPATH))
                LIBSEARCHPATH := $(patsubst =%,%,$(LIBSEARCHPATH))
                LIBSEARCHPATH := $(subst :, ,$(LIBSEARCHPATH))
                MINGWLIBS := libgcc_s_seh*.dll libstdc++*.dll libwinpthread*.dll
                ifneq ($(SWIGLIB),)
                    SWIGLIB := dqr.dll
                endif
            else
                CFLAGS += -D LINUX -std=c++11 -fPIC -DPIC
                SWIGCFLAGS += -D LINUX -std=c++11 -fPIC -DPIC
                LIBPATH = ../lib/linux
                PICLIBFLAGS := -L$(LIBPATH)/picbfd -L$(LIBPATH)/picopcodes -L$(LIBPATH)/picliberty
                LIBS := -lbfd -lopcodes -liberty -lz -ldl
                LNFLAGS = -static
                EXECUTABLE := dqr
            endif
        endif
    endif
    ifeq ($(UNAME_S),Darwin)
        PLATFORM = macos
        ifeq ($(BINUTILSPATH),)
            PICLIBS :=
            STATICLIBS :=
            LIBBFDOBJS :=
            LIBOPCODESOBJS :=
            LIBLIBERTYOBJS :=
        else
            PICLIBS :=
            STATICLIBS := bfd opcodes liberty intl zlib
            LIBBFDOBJS :=
            LIBOPCODESOBJS :=
            LIBLIBERTYOBJS :=
        endif
        SWIG = $(shell which swig 2> /dev/null)
        ifeq ($(SWIG),)
            $(info swig not found; skipping swig and dqr shared library build)
            SWIGLIB := 
            JNIINCLUDEPATHS :=
        else
            ifeq ($(JNIINCLUDE),)
                JAVAC = $(shell which javac 2> /dev/null)
                ifeq ($(JAVAC),)
                    $(info javac not found; skipping swig and the dqr shared library build)
                    JNIINCLUDE :=
                    JNIINCLUDEPATH :=
                else
                    JPATH := $(dir $(realpath $(JAVAC)))
                    $(info JPATH $(JPATH))
                    JHOME := $(shell $(JPATH)java_home 2> /dev/null)
                    $(info JHOME $(JHOME))
                    JNIINCLUDE := $(JHOME)/include
                endif
            endif
            ifeq ($(JNIINCLUDE),)
                $(info JNIINCLUDE not defined; skipping swig and dqr shared library build)
                SWIGLIB :=
                JNIINCLUDEPATHS :=
            else
                $(info using $(JNIINCLUDE) for JNIINCLUDE path)
                SWIGLIB := libdqr.dylib
                JNIINCLUDEPATHS := -I"$(JNIINCLUDE)" -I"$(JNIINCLUDE)/darwin"
            endif
        endif
        CFLAGS += -D OSX -std=c++11
        SWIGCFLAGS += -D OSX -std=c++11
        LIBPATH = ../lib/macos
        PICLIBFLAGS :=
        LIBS := -lbfd -lopcodes -liberty -lz -lintl -liconv
        LNFLAGS =
        EXECUTABLE := dqr
    endif
    UNAME_P := $(shell uname -p)
endif
